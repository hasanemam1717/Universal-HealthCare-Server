
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  role: 'role',
  needPasswordChange: 'needPasswordChange',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  profilePhoto: 'profilePhoto',
  contactNumber: 'contactNumber',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  profilePhoto: 'profilePhoto',
  contactNumber: 'contactNumber',
  address: 'address',
  registrationNumber: 'registrationNumber',
  experience: 'experience',
  gender: 'gender',
  appointmentFee: 'appointmentFee',
  qualification: 'qualification',
  currentWorkingPlace: 'currentWorkingPlace',
  designation: 'designation',
  isDeleted: 'isDeleted',
  averageRating: 'averageRating',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  profilePhoto: 'profilePhoto',
  contactNumber: 'contactNumber',
  address: 'address',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SpecialtiesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  icon: 'icon'
};

exports.Prisma.MedicalReportScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  reportName: 'reportName',
  reportLink: 'reportLink',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PatientHealthDataScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  gender: 'gender',
  dateOfBirth: 'dateOfBirth',
  bloodGroup: 'bloodGroup',
  hasAllergies: 'hasAllergies',
  hasDiabetes: 'hasDiabetes',
  height: 'height',
  weight: 'weight',
  smokingStatus: 'smokingStatus',
  dietaryPreferences: 'dietaryPreferences',
  pregnancyStatus: 'pregnancyStatus',
  mentalHealthHistory: 'mentalHealthHistory',
  immunizationStatus: 'immunizationStatus',
  hasPastSurgeries: 'hasPastSurgeries',
  recentAnxiety: 'recentAnxiety',
  recentDepression: 'recentDepression',
  maritalStatus: 'maritalStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ScheduleScalarFieldEnum = {
  id: 'id',
  startDateTime: 'startDateTime',
  endDateTime: 'endDateTime',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorSchedulesScalarFieldEnum = {
  doctorId: 'doctorId',
  scheduleId: 'scheduleId',
  appointmentId: 'appointmentId',
  isBooked: 'isBooked'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  scheduleId: 'scheduleId',
  videoCallingId: 'videoCallingId',
  status: 'status',
  paymentStatus: 'paymentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DoctorSpecialtiesScalarFieldEnum = {
  specialtiesId: 'specialtiesId',
  doctorId: 'doctorId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  amount: 'amount',
  transactionId: 'transactionId',
  status: 'status',
  paymentGatewayData: 'paymentGatewayData',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PrescriptionScalarFieldEnum = {
  id: 'id',
  appointmentId: 'appointmentId',
  doctorId: 'doctorId',
  patientId: 'patientId',
  instructions: 'instructions',
  followUpDate: 'followUpDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  patientId: 'patientId',
  doctorId: 'doctorId',
  appointmentId: 'appointmentId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN',
  DOCTOR: 'DOCTOR',
  PATIENT: 'PATIENT'
};

exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  BLOCKED: 'BLOCKED',
  DELETED: 'DELETED'
};

exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  SCHEDULED: 'SCHEDULED',
  ONPROGRESS: 'ONPROGRESS',
  COMPLETED: 'COMPLETED',
  CANCELED: 'CANCELED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  UNPAID: 'UNPAID',
  PAID: 'PAID',
  PENDING: 'PENDING'
};

exports.MaritalStatus = exports.$Enums.MaritalStatus = {
  UNMARRIED: 'UNMARRIED',
  MARRIED: 'MARRIED',
  DIVORCED: 'DIVORCED',
  WIDOWED: 'WIDOWED'
};

exports.BloodGroup = exports.$Enums.BloodGroup = {
  A_POS: 'A_POS',
  A_NEG: 'A_NEG',
  B_POS: 'B_POS',
  B_NEG: 'B_NEG',
  AB_POS: 'AB_POS',
  AB_NEG: 'AB_NEG',
  O_POS: 'O_POS',
  O_NEG: 'O_NEG'
};

exports.Prisma.ModelName = {
  User: 'User',
  Admin: 'Admin',
  Doctor: 'Doctor',
  Patient: 'Patient',
  Specialties: 'Specialties',
  MedicalReport: 'MedicalReport',
  PatientHealthData: 'PatientHealthData',
  Schedule: 'Schedule',
  DoctorSchedules: 'DoctorSchedules',
  Appointment: 'Appointment',
  DoctorSpecialties: 'DoctorSpecialties',
  Payment: 'Payment',
  Prescription: 'Prescription',
  Review: 'Review'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Projects\\Universal-HealthCare\\src\\generated\\prisma",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Projects\\Universal-HealthCare\\prisma\\schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../src/generated/prisma\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  SUPER_ADMIN\n  ADMIN\n  DOCTOR\n  PATIENT\n}\n\nenum UserStatus {\n  ACTIVE\n  BLOCKED\n  DELETED\n}\n\nmodel User {\n  id                 String     @id @default(uuid())\n  email              String     @unique\n  password           String\n  role               UserRole\n  needPasswordChange Boolean    @default(true)\n  status             UserStatus @default(ACTIVE)\n  createdAt          DateTime   @default(now())\n  updatedAt          DateTime   @updatedAt\n\n  admin   Admin?\n  doctor  Doctor?\n  patient Patient?\n\n  @@map(\"users\")\n}\n\nmodel Admin {\n  id            String   @id @default(uuid())\n  name          String\n  email         String   @unique\n  profilePhoto  String?\n  contactNumber String\n  isDeleted     Boolean  @default(false)\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  user User @relation(fields: [email], references: [email])\n\n  @@map(\"admins\")\n}\n\nenum Gender {\n  MALE\n  FEMALE\n}\n\nmodel Doctor {\n  id                  String              @id @default(uuid())\n  name                String\n  email               String              @unique\n  profilePhoto        String?\n  contactNumber       String\n  address             String?\n  registrationNumber  String\n  experience          Int                 @default(0)\n  gender              Gender\n  appointmentFee      Int\n  qualification       String\n  currentWorkingPlace String\n  designation         String\n  isDeleted           Boolean             @default(false)\n  averageRating       Float?\n  createdAt           DateTime            @default(now())\n  updatedAt           DateTime            @updatedAt\n  user                User                @relation(fields: [email], references: [email])\n  doctorSpecialties   DoctorSpecialties[]\n  doctorSchedules     DoctorSchedules[]\n  appointment         Appointment[]\n  prescription        Prescription[]\n  Review              Review[]\n\n  @@map(\"doctors\")\n}\n\nmodel Patient {\n  id            String   @id @unique @default(uuid())\n  email         String   @unique\n  name          String\n  profilePhoto  String?\n  contactNumber String?\n  address       String?\n  isDeleted     Boolean  @default(false)\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n\n  user              User               @relation(references: [email], fields: [email])\n  patientHealthData PatientHealthData?\n  medicalReport     MedicalReport[]\n  appointment       Appointment[]\n  prescription      Prescription[]\n  Review            Review[]\n\n  @@map(\"patients\")\n}\n\nmodel Specialties {\n  id                String              @id @default(uuid())\n  title             String\n  icon              String\n  doctorSpecialties DoctorSpecialties[]\n\n  @@map(\"specialties\")\n}\n\nmodel MedicalReport {\n  id         String   @id @default(uuid())\n  patientId  String\n  reportName String\n  reportLink String\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n  patient    Patient  @relation(fields: [patientId], references: [id])\n}\n\nmodel PatientHealthData {\n  id                  String        @id @default(uuid())\n  patientId           String        @unique\n  patient             Patient       @relation(fields: [patientId], references: [id])\n  gender              Gender\n  dateOfBirth         String\n  bloodGroup          BloodGroup\n  hasAllergies        Boolean?      @default(false)\n  hasDiabetes         Boolean?      @default(false)\n  height              String\n  weight              String\n  smokingStatus       Boolean?      @default(false)\n  dietaryPreferences  String?\n  pregnancyStatus     Boolean?      @default(false)\n  mentalHealthHistory String?\n  immunizationStatus  String?\n  hasPastSurgeries    Boolean?      @default(false)\n  recentAnxiety       Boolean?      @default(false)\n  recentDepression    Boolean?      @default(false)\n  maritalStatus       MaritalStatus @default(UNMARRIED)\n  createdAt           DateTime      @default(now())\n  updatedAt           DateTime      @updatedAt\n\n  @@map(\"patient_health_data\")\n}\n\nmodel Schedule {\n  id              String            @id @default(uuid())\n  startDateTime   DateTime\n  endDateTime     DateTime\n  createdAt       DateTime          @default(now())\n  updatedAt       DateTime          @updatedAt\n  doctorSchedules DoctorSchedules[]\n  appointment     Appointment?\n\n  @@map(\"schedules\")\n}\n\nmodel DoctorSchedules {\n  doctorId      String\n  doctor        Doctor       @relation(fields: [doctorId], references: [id])\n  scheduleId    String\n  schedule      Schedule     @relation(fields: [scheduleId], references: [id])\n  appointmentId String?      @unique\n  isBooked      Boolean      @default(false)\n  appointment   Appointment? @relation(fields: [appointmentId], references: [id])\n\n  @@id([doctorId, scheduleId])\n  @@map(\"doctor\")\n}\n\nmodel Appointment {\n  id             String            @id @default(uuid())\n  patientId      String\n  doctorId       String\n  scheduleId     String            @unique\n  videoCallingId String?\n  status         AppointmentStatus @default(SCHEDULED)\n  paymentStatus  PaymentStatus     @default(UNPAID)\n  createdAt      DateTime          @default(now())\n  updatedAt      DateTime          @updatedAt\n  doctorSchedule DoctorSchedules?\n  payment        Payment?\n\n  // Relations\n  patient      Patient       @relation(fields: [patientId], references: [id])\n  doctor       Doctor        @relation(fields: [doctorId], references: [id])\n  schedule     Schedule      @relation(fields: [scheduleId], references: [id])\n  Prescription Prescription?\n  Review       Review?\n\n  @@map(\"appointments\")\n}\n\nenum AppointmentStatus {\n  SCHEDULED\n  ONPROGRESS\n  COMPLETED\n  CANCELED\n}\n\nenum PaymentStatus {\n  UNPAID\n  PAID\n  PENDING\n}\n\nmodel DoctorSpecialties {\n  specialtiesId String\n  specialties   Specialties @relation(fields: [specialtiesId], references: [id])\n  doctorId      String\n  doctor        Doctor      @relation(fields: [doctorId], references: [id])\n\n  @@id([specialtiesId, doctorId])\n  @@map(\"doctorSpecialties\")\n}\n\nenum MaritalStatus {\n  UNMARRIED\n  MARRIED\n  DIVORCED\n  WIDOWED\n}\n\nenum BloodGroup {\n  A_POS // A+\n  A_NEG // A-\n  B_POS // B+\n  B_NEG // B-\n  AB_POS // AB+\n  AB_NEG // AB-\n  O_POS // O+\n  O_NEG // O-\n}\n\nmodel Payment {\n  id                 String        @id @default(uuid())\n  appointmentId      String        @unique\n  appointment        Appointment   @relation(fields: [appointmentId], references: [id])\n  amount             Float\n  transactionId      String        @unique\n  status             PaymentStatus @default(UNPAID)\n  paymentGatewayData Json?\n  createdAt          DateTime      @default(now())\n  updatedAt          DateTime      @updatedAt\n\n  @@map(\"payments\")\n}\n\nmodel Prescription {\n  id            String      @id @default(uuid())\n  appointmentId String      @unique\n  appointment   Appointment @relation(fields: [appointmentId], references: [id])\n\n  doctorId String\n  doctor   Doctor @relation(fields: [doctorId], references: [id])\n\n  patientId String\n  patient   Patient @relation(fields: [patientId], references: [id])\n\n  instructions String\n  followUpDate DateTime?\n  createdAt    DateTime  @default(now())\n  updatedAt    DateTime  @updatedAt\n\n  @@map(\"prescriptions\")\n}\n\nmodel Review {\n  id        String  @id @default(uuid())\n  patientId String\n  patient   Patient @relation(fields: [patientId], references: [id])\n\n  doctorId String\n  doctor   Doctor @relation(fields: [doctorId], references: [id])\n\n  appointmentId String      @unique\n  appointment   Appointment @relation(fields: [appointmentId], references: [id])\n\n  rating    Float\n  comment   String\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"reviews\")\n}\n",
  "inlineSchemaHash": "77dce967e4814e0c8ee9d8c3f02abf7630f7f7f591cf1f2eaf2dad1f7a671730",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"needPasswordChange\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"UserStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"admin\",\"kind\":\"object\",\"type\":\"Admin\",\"relationName\":\"AdminToUser\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"DoctorToUser\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"PatientToUser\"}],\"dbName\":\"users\"},\"Admin\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePhoto\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AdminToUser\"}],\"dbName\":\"admins\"},\"Doctor\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePhoto\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"registrationNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experience\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"appointmentFee\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"qualification\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentWorkingPlace\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"designation\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"averageRating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"DoctorToUser\"},{\"name\":\"doctorSpecialties\",\"kind\":\"object\",\"type\":\"DoctorSpecialties\",\"relationName\":\"DoctorToDoctorSpecialties\"},{\"name\":\"doctorSchedules\",\"kind\":\"object\",\"type\":\"DoctorSchedules\",\"relationName\":\"DoctorToDoctorSchedules\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToDoctor\"},{\"name\":\"prescription\",\"kind\":\"object\",\"type\":\"Prescription\",\"relationName\":\"DoctorToPrescription\"},{\"name\":\"Review\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"DoctorToReview\"}],\"dbName\":\"doctors\"},\"Patient\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePhoto\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contactNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isDeleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PatientToUser\"},{\"name\":\"patientHealthData\",\"kind\":\"object\",\"type\":\"PatientHealthData\",\"relationName\":\"PatientToPatientHealthData\"},{\"name\":\"medicalReport\",\"kind\":\"object\",\"type\":\"MedicalReport\",\"relationName\":\"MedicalReportToPatient\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToPatient\"},{\"name\":\"prescription\",\"kind\":\"object\",\"type\":\"Prescription\",\"relationName\":\"PatientToPrescription\"},{\"name\":\"Review\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"PatientToReview\"}],\"dbName\":\"patients\"},\"Specialties\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctorSpecialties\",\"kind\":\"object\",\"type\":\"DoctorSpecialties\",\"relationName\":\"DoctorSpecialtiesToSpecialties\"}],\"dbName\":\"specialties\"},\"MedicalReport\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reportName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reportLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"MedicalReportToPatient\"}],\"dbName\":null},\"PatientHealthData\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"PatientToPatientHealthData\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bloodGroup\",\"kind\":\"enum\",\"type\":\"BloodGroup\"},{\"name\":\"hasAllergies\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"hasDiabetes\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"height\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"weight\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"smokingStatus\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"dietaryPreferences\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"pregnancyStatus\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"mentalHealthHistory\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"immunizationStatus\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hasPastSurgeries\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"recentAnxiety\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"recentDepression\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"maritalStatus\",\"kind\":\"enum\",\"type\":\"MaritalStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"patient_health_data\"},\"Schedule\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDateTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDateTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"doctorSchedules\",\"kind\":\"object\",\"type\":\"DoctorSchedules\",\"relationName\":\"DoctorSchedulesToSchedule\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToSchedule\"}],\"dbName\":\"schedules\"},\"DoctorSchedules\":{\"fields\":[{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"DoctorToDoctorSchedules\"},{\"name\":\"scheduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"schedule\",\"kind\":\"object\",\"type\":\"Schedule\",\"relationName\":\"DoctorSchedulesToSchedule\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isBooked\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToDoctorSchedules\"}],\"dbName\":\"doctor\"},\"Appointment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduleId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"videoCallingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"AppointmentStatus\"},{\"name\":\"paymentStatus\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"doctorSchedule\",\"kind\":\"object\",\"type\":\"DoctorSchedules\",\"relationName\":\"AppointmentToDoctorSchedules\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"AppointmentToPayment\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"AppointmentToPatient\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"AppointmentToDoctor\"},{\"name\":\"schedule\",\"kind\":\"object\",\"type\":\"Schedule\",\"relationName\":\"AppointmentToSchedule\"},{\"name\":\"Prescription\",\"kind\":\"object\",\"type\":\"Prescription\",\"relationName\":\"AppointmentToPrescription\"},{\"name\":\"Review\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"AppointmentToReview\"}],\"dbName\":\"appointments\"},\"DoctorSpecialties\":{\"fields\":[{\"name\":\"specialtiesId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"specialties\",\"kind\":\"object\",\"type\":\"Specialties\",\"relationName\":\"DoctorSpecialtiesToSpecialties\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"DoctorToDoctorSpecialties\"}],\"dbName\":\"doctorSpecialties\"},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToPayment\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"paymentGatewayData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"payments\"},\"Prescription\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToPrescription\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"DoctorToPrescription\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"PatientToPrescription\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"followUpDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"prescriptions\"},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"patient\",\"kind\":\"object\",\"type\":\"Patient\",\"relationName\":\"PatientToReview\"},{\"name\":\"doctorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"doctor\",\"kind\":\"object\",\"type\":\"Doctor\",\"relationName\":\"DoctorToReview\"},{\"name\":\"appointmentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appointment\",\"kind\":\"object\",\"type\":\"Appointment\",\"relationName\":\"AppointmentToReview\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"reviews\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

